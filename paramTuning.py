import subprocess
import re
import matplotlib.pyplot as plt
import json
#tuning hyperparameters -- number of heads and layers
def plot_results(results):
    for data in results:
        num_head = data["num_head"]
        num_layer = data["num_layer"]
        losses = data["losses"]

        if not losses:
            print(f"Skipping plot for num_head={num_head}, num_layer={num_layer} due to lack of data.")
            continue

        steps, train_losses, val_losses = zip(*losses)  # Unzipping the tuple
        steps = [int(s) for s in steps]
        train_losses = [float(t) for t in train_losses]
        val_losses = [float(v) for v in val_losses]

        plt.figure(figsize=(10, 5))
        plt.plot(steps, train_losses,'o-', label="Train Loss", color='blue')
        plt.plot(steps, val_losses, 'o-', label="Validation Loss", color='red')

        # Annotating the points
        for i, txt in enumerate(train_losses):
            plt.annotate(f"{txt:.2f}", (steps[i], train_losses[i]), fontsize=9, ha='center', va='bottom')

        for i, txt in enumerate(val_losses):
            plt.annotate(f"{txt:.2f}", (steps[i], val_losses[i]), fontsize=9, ha='center', va='top')

        plt.xlabel("Steps")
        plt.ylabel("Loss")
        plt.title(f"Training for num_head={num_head}, num_layer={num_layer}")
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.savefig(f'plot_num_head_{num_head}_num_layer_{num_layer}.png')
        plt.show()






def run_training_and_capture_output(num_head, num_layer, max_iters=500):
    command = ["python3", "train.py", "config/train_shakespeare_char.py", f"--n_head={num_head}", f"--n_layer={num_layer}"]

    result = subprocess.run(command, text=True, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
    stdout = result.stdout  # This captures the standard output without the warnings

    if result.returncode != 0:
        print("Error encountered:")
        print(result.stderr)
        return None

    pattern = r"step (\d+): train loss (\d+\.\d+), val loss (\d+\.\d+)"
    matches = re.findall(pattern, stdout)

    data = {
        "num_head": num_head,
        "num_layer": num_layer,
        "losses": matches
    }

    return data

# Range of n_head and n_layer values you want to test
n_heads = [6, 8, 12, 16]
n_layers = [6, 8, 10, 12]

results = []

# for n_head in n_heads:
#     for n_layer in n_layers:
#         result = run_training_and_capture_output(n_head, n_layer)
#         print(result)
#         results.append(result)
#
#
# # Save results to a JSON file
# with open('training_results.json', 'w') as file:
#     json.dump(results, file)

# Plot the results
# plot_results(results)
# print(results)

data = [{"num_head": 6, 'num_layer': 6, 'losses': [('0', '4.2874', '4.2823'), ('250', '1.9735', '2.0763'), ('500', '1.5327', '1.7227'), ('750', '1.3647', '1.5858'), ('1000', '1.2815', '1.5267'), ('1250', '1.2125', '1.4973'), ('1500', '1.1570', '1.4807'), ('1750', '1.1064', '1.4710'), ('2000', '1.0607', '1.4818'), ('2250', '1.0133', '1.4826'), ('2500', '0.9640', '1.5009'), ('2750', '0.9159', '1.5193'), ('3000', '0.8696', '1.5339'), ('3250', '0.8268', '1.5653'), ('3500', '0.7850', '1.5754'), ('3750', '0.7445', '1.6077'), ('4000', '0.7139', '1.6290'), ('4250', '0.6830', '1.6473'), ('4500', '0.6586', '1.6706'), ('4750', '0.6417', '1.6856'), ('5000', '0.6263', '1.7046')]},
  {'num_head': 6, 'num_layer': 8, 'losses': [('0', '4.3099', '4.3027'), ('250', '1.9650', '2.0647'), ('500', '1.5214', '1.7108'), ('750', '1.3421', '1.5681'), ('1000', '1.2459', '1.5097'), ('1250', '1.1755', '1.4777'), ('1500', '1.1125', '1.4678'), ('1750', '1.0533', '1.4659'), ('2000', '0.9984', '1.4908'), ('2250', '0.9303', '1.5052'), ('2500', '0.8691', '1.5263'), ('2750', '0.7955', '1.5741'), ('3000', '0.7375', '1.6128'), ('3250', '0.6759', '1.6596'), ('3500', '0.6233', '1.6959'), ('3750', '0.5705', '1.7402'), ('4000', '0.5332', '1.7740'), ('4250', '0.4972', '1.8135'), ('4500', '0.4677', '1.8500'), ('4750', '0.4421', '1.8789'), ('5000', '0.4262', '1.9007')]},
  {'num_head': 6, 'num_layer': 10, 'losses': [('0', '4.2018', '4.1939'), ('250', '1.9753', '2.0788'), ('500', '1.5361', '1.7338'), ('750', '1.3462', '1.5639'), ('1000', '1.2336', '1.5028'), ('1250', '1.1575', '1.4694'), ('1500', '1.0938', '1.4756'), ('1750', '1.0144', '1.4800'), ('2000', '0.9436', '1.5014'), ('2250', '0.8635', '1.5446'), ('2500', '0.7811', '1.5818'), ('2750', '0.6979', '1.6389'), ('3000', '0.6173', '1.7290'), ('3250', '0.5464', '1.7863'), ('3500', '0.4854', '1.8558'), ('3750', '0.4298', '1.9184'), ('4000', '0.3817', '1.9838'), ('4250', '0.3461', '2.0276'), ('4500', '0.3178', '2.0781'), ('4750', '0.2961', '2.1245'), ('5000', '0.2792', '2.1628')]},
  {"num_head": 6, 'num_layer': 12, 'losses': [('0', '4.2102', "4.2037"), ('250', '1.9825', '2.0883'), ('500', '1.5246', '1.7193'), ('750', '1.3318', '1.5548'), ('1000', '1.2222', '1.4933'), ('1250', '1.1385', '1.4727'), ('1500', '1.0586', '1.4845'), ('1750', '0.9779', '1.4993'), ('2000', '0.8857', '1.5365'), ('2250', '0.7898', '1.5980'), ('2500', '0.6924', '1.6747'), ('2750', '0.5982', '1.7448'), ('3000', '0.5092', '1.8352'), ('3250', '0.4297', '1.9420'), ('3500', '0.3652', '2.0141'), ('3750', '0.3130', '2.1127'), ('4000', '0.2720', '2.1814'), ('4250', '0.2388', '2.2572'), ('4500', '0.2148', '2.3330'), ('4750', '0.1963', '2.4021'), ('5000', '0.1823', '2.4431')]},
  {'num_head': 8, 'num_layer': 6, 'losses': [('0', '4.2869', '4.2818'), ('250', '1.9968', '2.0836'), ('500', '1.5352', '1.7354'), ('750', '1.3586', '1.5853'), ('1000', '1.2638', '1.5176'), ('1250', '1.1974', '1.4950'), ('1500', '1.1428', '1.4761'), ('1750', '1.0928', '1.4774'), ('2000', '1.0478', '1.4800'), ('2250', '0.9983', '1.4895'), ('2500', '0.9466', '1.5026'), ('2750', '0.8989', '1.5234'), ('3000', '0.8512', '1.5363'), ('3250', '0.8074', '1.5684'), ('3500', '0.7639', '1.5935'), ('3750', '0.7226', '1.6205'), ('4000', '0.6907', '1.6389'), ('4250', '0.6606', '1.6621'), ('4500', '0.6342', '1.6842'), ('4750', '0.6158', '1.7011'), ('5000', '0.6024', '1.7150')]},
  {'num_head': 8, 'num_layer': 8, 'losses': [('0', '4.3095', '4.3024'), ('250', '1.9972', '2.0843'), ('500', '1.5244', '1.7139'), ('750', '1.3389', '1.5636'), ('1000', '1.2422', '1.5124'), ('1250', '1.1660', '1.4770'), ('1500', '1.1028', '1.4706'), ('1750', '1.0425', '1.4703'), ('2000', '0.9809', '1.4837'), ('2250', '0.9113', '1.5036'), ('2500', '0.8426', '1.5494'), ('2750', '0.7673', '1.5951'), ('3000', '0.7066', '1.6420'), ('3250', '0.6395', '1.6864'), ('3500', '0.5844', '1.7234'), ('3750', '0.5345', '1.7685'), ('4000', '0.4937', '1.8060'), ('4250', '0.4569', '1.8528'), ('4500', '0.4259', '1.8921'), ('4750', '0.4028', '1.9129'), ('5000', '0.3854', '1.9481')]},
  {"num_head": 8, 'num_layer': 10, 'losses': [('0', '4.2018', '4.1939'), ('250', '1.9957', '2.1035'), ('500', '1.5198', '1.7209'), ('750', '1.3335', '1.5508'), ('1000', '1.2245', '1.5021'), ('1250', '1.1526', '1.4806'), ('1500', '1.0785', '1.4754'), ('1750', '0.9995', '1.4941'), ('2000', '0.9230', '1.5207'), ('2250', '0.8371', '1.5796'), ('2500', '0.7553', '1.6195'), ('2750', '0.6710', '1.6840'), ('3000', '0.5908', '1.7708'), ('3250', '0.5168', '1.8418'), ('3500', '0.4521', '1.9162'), ('3750', '0.3990', '1.9813'), ('4000', '0.3578', '2.0294'), ('4250', '0.3213', '2.0941'), ('4500', '0.2921', '2.1360'), ('4750', '0.2751', '2.1761'), ('5000', '0.2562', '2.2290')]},
  {'num_head': 8, 'num_layer': 12, 'losses': [('0', '4.2107', '4.2042'), ('250', '1.9987', '2.0906'), ('500', '1.5131', '1.6997'), ('750', '1.3220', '1.5523'), ('1000', '1.2131', '1.4894'), ('1250', '1.1280', '1.4778'), ('1500', '1.0469', '1.4913'), ('1750', '0.9654', '1.5130'), ('2000', '0.8722', '1.5448'), ('2250', '0.7729', '1.6220'), ('2500', '0.6758', '1.6974'), ('2750', '0.5827', '1.7598'), ('3000', '0.4919', '1.8503'), ('3250', '0.4117', '1.9763'), ('3500', '0.3478', '2.0469'), ('3750', '0.2969', '2.1400'), ('4000', '0.2552', '2.2242'), ('4250', '0.2259', '2.2847'), ('4500', '0.2009', '2.3747'), ('4750', '0.1850', '2.4288'), ('5000', '0.1724', '2.4693')]},
  {'num_head': 12, 'num_layer': 6, 'losses': [('0', '4.2867', '4.2817'), ('250', '2.0356', '2.1214'), ('500', '1.5294', '1.7319'), ('750', '1.3478', '1.5841'), ('1000', '1.2527', '1.5131'), ('1250', '1.1817', '1.4935'), ('1500', '1.1292', '1.4803'), ('1750', '1.0791', '1.4783'), ('2000', '1.0261', '1.4881'), ('2250', '0.9706', '1.4958'), ('2500', '0.9156', '1.5134'), ('2750', '0.8645', '1.5341'), ('3000', '0.8163', '1.5524'), ('3250', '0.7663', '1.5988'), ('3500', '0.7188', '1.6159'), ('3750', '0.6782', '1.6438'), ('4000', '0.6435', '1.6702'), ('4250', '0.6124', '1.6933'), ('4500', '0.5859', '1.7246'), ('4750', '0.5657', '1.7432'), ('5000', '0.5519', '1.7625')]},
  {'num_head': 12, 'num_layer': 8, 'losses': [('0', '4.3097', '4.3025'), ('250', '2.0398', '2.1184'), ('500', '1.5279', '1.7227'), ('750', '1.3347', '1.5638'), ('1000', '1.2340', '1.5011'), ('1250', '1.1635', '1.4873'), ('1500', '1.0984', '1.4743'), ('1750', '1.0372', '1.4604'), ('2000', '0.9720', '1.4929'), ('2250', '0.9050', '1.5195'), ('2500', '0.8359', '1.5572'), ('2750', '0.7632', '1.5979'), ('3000', '0.7037', '1.6427'), ('3250', '0.6408', '1.6900'), ('3500', '0.5870', '1.7366'), ('3750', '0.5344', '1.7835'), ('4000', '0.4934', '1.8268'), ('4250', '0.4577', '1.8731'), ('4500', '0.4289', '1.9061'), ('4750', '0.4063', '1.9336'), ('5000', '0.3900', '1.9637')]},
  {'num_head': 12, 'num_layer': 10, 'losses': [('0', '4.2011', '4.1932'), ('250', '2.0297', '2.1334'), ('500', '1.5210', '1.7170'), ('750', '1.3290', '1.5419'), ('1000', '1.2177', '1.5004'), ('1250', '1.1375', '1.4714'), ('1500', '1.0635', '1.4780'), ('1750', '0.9864', '1.4972'), ('2000', '0.9051', '1.5118'), ('2250', '0.8155', '1.5725'), ('2500', '0.7326', '1.6121'), ('2750', '0.6457', '1.6840'), ('3000', '0.5672', '1.7655'), ('3250', '0.4928', '1.8424'), ('3500', '0.4291', '1.9165'), ('3750', '0.3748', '1.9856'), ('4000', '0.3342', '2.0453'), ('4250', '0.2987', '2.1080'), ('4500', '0.2710', '2.1553'), ('4750', '0.2526', '2.2031'), ('5000', '0.2363', '2.2485')]},
  {'num_head': 12, 'num_layer': 12, 'losses': [('0', '4.2093', '4.2028'), ('250', '2.0551', '2.1360'), ('500', '1.5258', '1.7104'), ('750', '1.3241', '1.5585'), ('1000', '1.2148', '1.4914'), ('1250', '1.1239', '1.4764'), ('1500', '1.0450', '1.4935'), ('1750', '0.9618', '1.5168'), ('2000', '0.8656', '1.5550'), ('2250', '0.7699', '1.6294'), ('2500', '0.6724', '1.7021'), ('2750', '0.5822', '1.7800'), ('3000', '0.4903', '1.8628'), ('3250', '0.4132', '1.9770'), ('3500', '0.3476', '2.0797'), ('3750', '0.2981', '2.1629'), ('4000', '0.2584', '2.2356'), ('4250', '0.2262', '2.3153'), ('4500', '0.2024', '2.3989'), ('4750', '0.1873', '2.4480'), ('5000', '0.1743', '2.4912')]},
  {'num_head': 16, 'num_layer': 6, 'losses': [('0', '4.2856', '4.2806'), ('250', '2.0641', '2.1502'), ('500', '1.5454', '1.7498'), ('750', '1.3488', '1.5798'), ('1000', '1.2595', '1.5251'), ('1250', '1.1860', '1.4962'), ('1500', '1.1321', '1.4878'), ('1750', '1.0758', '1.4772'), ('2000', '1.0264', '1.4908'), ('2250', '0.9703', '1.5060'), ('2500', '0.9168', '1.5143'), ('2750', '0.8650', '1.5361'), ('3000', '0.8148', '1.5516'), ('3250', '0.7646', '1.6065'), ('3500', '0.7199', '1.6199'), ('3750', '0.6772', '1.6581'), ('4000', '0.6428', '1.6828'), ('4250', '0.6105', '1.7108'), ('4500', '0.5846', '1.7360'), ('4750', '0.5658', '1.7500'), ('5000', '0.5522', '1.7708')]},
  {'num_head': 16, 'num_layer': 8, 'losses': [('0', '4.3105', '4.3034'), ('250', '2.0498', '2.1226'), ('500', '1.5369', '1.7270'), ('750', '1.3440', '1.5748'), ('1000', '1.2424', '1.5184'), ('1250', '1.1711', '1.4924'), ('1500', '1.1071', '1.4736'), ('1750', '1.0450', '1.4811'), ('2000', '0.9846', '1.5034'), ('2250', '0.9154', '1.5224'), ('2500', '0.8467', '1.5661'), ('2750', '0.7760', '1.5984'), ('3000', '0.7176', '1.6378'), ('3250', '0.6506', '1.7013'), ('3500', '0.5970', '1.7338'), ('3750', '0.5445', '1.7851'), ('4000', '0.5083', '1.8195'), ('4250', '0.4693', '1.8678'), ('4500', '0.4396', '1.9034'), ('4750', '0.4173', '1.9280'), ('5000', '0.3970', '1.9664')]},
  {'num_head': 16, 'num_layer': 10, 'losses': [('0', '4.2015', '4.1937'), ('250', '2.0375', '2.1316'), ('500', '1.5239', '1.7188'), ('750', '1.3292', '1.5526'), ('1000', '1.2179', '1.5129'), ('1250', '1.1419', '1.4812'), ('1500', '1.0672', '1.4855'), ('1750', '0.9867', '1.4999'), ('2000', '0.9095', '1.5369'), ('2250', '0.8214', '1.5762'), ('2500', '0.7362', '1.6326'), ('2750', '0.6497', '1.6924'), ('3000', '0.5747', '1.7920'), ('3250', '0.5017', '1.8418'), ('3500', '0.4414', '1.9165'), ('3750', '0.3869', '1.9916'), ('4000', '0.3450', '2.0433'), ('4250', '0.3098', '2.1006'), ('4500', '0.2829', '2.1483'), ('4750', '0.2638', '2.1871'), ('5000', '0.2474', '2.2434')]},
  {'num_head': 16, 'num_layer': 12, 'losses': [('0', '4.2095', '4.2031'), ('250', '2.0502', '2.1285'), ('500', '1.5248', '1.7153'), ('750', '1.3274', '1.5637'), ('1000', '1.2134', '1.4992'), ('1250', '1.1239', '1.4877'), ('1500', '1.0412', '1.4924'), ('1750', '0.9595', '1.5111'), ('2000', '0.8617', '1.5658'), ('2250', '0.7645', '1.6325'), ('2500', '0.6638', '1.7030'), ('2750', '0.5746', '1.7870'), ('3000', '0.4817', '1.8887'), ('3250', '0.4086', '1.9909'), ('3500', '0.3456', '2.0597'), ('3750', '0.2922', '2.1681'), ('4000', '0.2534', '2.2367'), ('4250', '0.2207', '2.3130'), ('4500', '0.2008', '2.3834'), ('4750', '0.1847', '2.4440'), ('5000', '0.1713', '2.4906')]}]



# Extract losses at 5000 steps
configs = []
train_losses = []
val_losses = []

for entry in data:
    num_head = entry["num_head"]
    num_layer = entry["num_layer"]

    for step, train_loss, val_loss in entry["losses"]:
        if step == '5000':
            configs.append((num_head, num_layer))
            train_losses.append(float(train_loss))
            val_losses.append(float(val_loss))
            break

# Plot
fig, ax = plt.subplots()
x_labels = [f"({c[0]},{c[1]})" for c in configs]

ax.plot(x_labels, train_losses, label="Train Loss", marker='o')
ax.plot(x_labels, val_losses, label="Val Loss", marker='o')

ax.set_xlabel('Configurations (num_head, num_layer)')
ax.set_ylabel('Loss')
ax.set_title('Losses at 5000 steps for different configurations')
ax.legend()
# plt.ylim(0, 4)

plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
